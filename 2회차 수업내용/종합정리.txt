변수 : 데이터를 저장하기 위한 물리적인 공간
         데이터를 관리하기 위해 필요
- 변수 선언 방법 
자료형 변수명 = 초기값;

- 자료형 종류
int : 4바이트, 정수
char : 1바이트, 문자, 정수
float : 4바이트, 실수, 소수점 6자리까지
double : 8바이트, 실수, 소수점 15자리까지

- 변수명 작성 규칙(필수)
1. 동일한 변수명은 불가능
2. 숫자가 첫글자로 올 수 없음
3. 특수문자는 _와 $만 가능
4. 대소문자 구별
5. 예약어 사용 불가능(int return)

- 변수명 작성 관례(선택)
1. 변수명은 의미있게 지어라
예 : int grade;
2. 카멜 표기법 : 변수명이 여러 단어이 경우 두번째 단어부터 첫글자만
   대문자료 표기
예 : int studentCount;

- printf : 주어진 문자열을 콘솔에 출력하는 함수
printf("문자열");
- scanf : 주어진 문자열 패턴대로 콘솔에서 값을 읽어오는 함수
- 주소연산자 &
  - 변수명 앞에 붙는 연산자로 해당 변수의 주소를 나타낸다
- 서식문자
%d : 10진 정수
%c : 문자
%f : float 실수
%lf: double 실수
%s : 문자열

연산자
- 연산자 종류와 결과
- 산술(+,-,*,/,%)
  - / : 정수 / 정수 => 정수이기 때문에 소수점이 사라짐
    1 / 2는 0.5가 아니라 0이다
  - % : 나머지 연산자, 나누었을 때 나머지 값을 알려주는 연산자
  - /와 %는 0으로 나눌 수 없음
- 대입(=)
  - 오른쪽에 있는 값은 왼쪽에 저장하는(덮어쓰는) 연산자
  - A는 B이면 ...해라 : 비교연산자 ==를 써야한다
  - 왼쪽에는 변수가 한개 와야 한다. 단, 배열이나 포인터변수를 이용할땐
    예외
int num;
num = 10 - 1;
int a = 1, b = 2;
int arr[10];
int index = 0;
arr[0] = 10;
arr[index] = 10;
- 증감 : 최종적으로 1증가 또는 1감소(++, --)
  - 전위형(++변수명) : 변수의 값을 먼저 1 증가하고 동작
  - 후위형(변수명++) : 동작을 먼저 하고 변수의 값을 1 증가
int index = 0;
int arr[10];
arr[index++] = 10;//0번지에 10을 추가하고, index를 1로 증가
index = 0;
arr[++index] = 10;//index를 1로 증가하고 1번지에 10을 추가
index = 0;
index++;
arr[index] = 10;//전위형처럼 처리가 된 상황
- 관계(비교)연산자 : 크기 비교
  - 결과값이 참 또는 거짓(조건식)
  - ==와 =을 조심
  - >=는 있지만 =>는 없은 기호
  - <=는 있지만 =<는 없는 기호
  - 참 : 1, 0이 아닌 수
  - 거짓 : 0
- 논리연산자 : &&, ||, !
  - && : ~하고, 둘다 참이면 참, 나머지는 거짓
  - || : ~하거나, 둘다 거짓이면 거짓, 나머지는 참
  - ! : 반대, 참이면 거짓, 거짓이면 참
  - 논리 연산자 양 옆에는 조건식이 와야 한다
- 조건선택연산자 : 조건식?참 : 거짓;
- 비트 논리 연산자 : &, |, ~, ^
  - 비트 논리 연산자 양 옆에는 값(변수 또는 상수)이 와야한다
  - 값을 비트로 나열한 후 논리 연산을 한다
  - 결과값이 값으로 나옴, 참 거짓이 아님
- 연산자 우선순위 : ()가 제일 우선순위가 높다

- 자료형변환 : 변수나 값의 자료형을 일시적으로 변환
(자료형)변수

- c언어에서 자료형변환의 융통성이 크다

조건문
- ~하면 ...해라
~ : 조건식, ... : 실행문
- if문 문법
  - if : 1개 필수
  - else if : 0개 이상
  - else : 0개 또는 1개
if(조건식1){ //조건식1이 참이면 실행문1 실행해라
	실행문1;
}else if(조건식2){//조건식1이 거짓이고, 조건식2가 참이면 실행문2 실행
	실행문2;
}else {//조건식1과 조건식2 모두 거짓이면 실행문3을 실행
	실행문3;
}

score가 90점이상이고 100점이하이면 A학점이라고 출력하는 조건문을
작성해보세요
- 비교, 논리
if( score >= 90 && score <= 100 ){
	printf("A\n");
}

switch문 문법
 - 변수에는 식도 포함
switch(변수){
case 값1:			//if(변수 == 값1)
	실행문1;		
	break;		
case 값2:			//else if(변수 == 값2)
	실행문2;		
	break;
defalut:			//else	
	실행문3;
}

반복문 : 규치적인 반복을 할 때 사용하는 문법
  - 반복문 문제 해결 과정
    1. 문제를 자세히 풀어씀
    2. 반복횟수, 실행문, 반복문 종료 후로 문제를 나눔
    3. 나눈 부분을 코드로 
- for문 문법
for(1.초기화; 2.5.8.조건식; 4.7.증감식){
	3.6.실행문;
}
  - 반복문은 조건식이 참이면 반복문 계속 실행, 거짓이면 종료
  - 1.초기화 : 조건식이나 실행문에서 사용하는 변수를 초기화, 생략가능
  - 2.조건식 : 조건식이 참이면 실행, 거짓이면 종료, 생략가능
                 생략하면 무조건 참
  - 4.증감식 : 조건식을 조절하기 위해 조건문에서 사용하는 변수를 증가
                 또는 감소 시킴, 생략가능
- while문 문법 : 조건식 생략 불가능
while(조건식){
	실행문;
}
- do while문 문법 : 무조건 1번은 실행
do{
	실행문;
}while(조건식);
- break : 반복문을 빠져 나올 때 사용
- continue : 스킵, 특정 위치로 건너 뜀
  - for문 : 증감식으로
  - while문, do while문 : 조건식으로 
for( ; ; ){
	for( ; ; ){
		if(){
			...
			break;
		}
		//A
	}
	//B
}
//C

포인터 : 주소
 - 포인터 변수 : 주소를 저장하는 변수
 - 동적할당을 이용하여 배열을 생성 할 때
 - 함수에서 매개변수의 값을 바꾸고 싶을 때

배열 : 동일한 자료형을 가진 변수들의 집합
 - 동일한 의미를 가진 변수들을 여러개 만들어야 할 때 사용
 - 배열 선언
자료형 배열명[크기] = { 값1, 값2, ...};
 - 배열의 크기는 상수만 가능
 - 배열은 크기를 조절할 수 없다(정적)
 - 배열의 이름은 0번지 주소를 의미
 - 배열의 시작번지는 0번지
 - 배열의 마지막번지는 크기-1번지
 - 배열은 반복문과 같이 사용

구조체 : 하나의 정보를 나타내기 위한 변수들의 집합
 - 구조체 선언
typedef struct 구조체명{
	멤버변수들;
} 구조체명;
 - 구조체의 맴버 변수 접근
   객체명.멤버변수명;

함수 : 하나의 기능이 동작하도록 모아놓은 코드
 - 함수 선언
리턴타입 함수명(매개변수);
 - 함수 사용 이유
   - 재사용을 통해 코드의 중복을 제거
   - 유지 보수가 쉽다
   - 구조적으로 프로그래밍 하기 위해
 - 함수 만드는 과정
  1. 기능을 정리(자세히)
  2. 매개변수, 리턴타입을 정리
  3. 함수명 결정
  4. 함수 구현

표준함수 : 표준으로 미리 만들어져 널리 사용되고 있는 함수
- 문자열 함수
strcmp : 비교
strcpy : 복사
strcat : 이어붙이기
strlen : 글자수,문자열의 길이,첫번째\0를 만나기 전까지의 문자의 갯수,
         글자수는 배열의 크기와 다름
char str[11] = "hi";
int size = strlen(str);//size = 2

























